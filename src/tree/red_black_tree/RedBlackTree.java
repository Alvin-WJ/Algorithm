/*
在搜索二叉树的基础上，由于插入数据的不随机性导致了不平衡的搜索二叉树，这样就使得搜索二叉树的效率降低，引入红黑树。红黑树也是搜索二叉树的一种，只是有红黑树的特点，每次向红黑树中插入数据后，都需要重新验证是否符合红黑树的标准，如果不符合就需要变色或旋转直到符合位置。红黑树一定是平衡二叉树。

非平衡的搜索二叉树的极端情况是一个链表，查找的效率降为最低o(n).
平衡的搜素二叉树的效率极高，查找的效率是o(log(n)).


红黑树（Red Black Tree） 是一种自平衡二叉查找树，在进行插入和删除操作时通过特定操作（变色或旋转）保持二叉查找树的平衡，从而获得较高的o(log(n))查找性能。
红黑树是每个节点都带有颜色属性的二叉查找树，颜色或红色或黑色。在二叉查找树强制一般要求以外，对于任何有效的红黑树要求:
性质1. 节点是红色或黑色。
性质2. 根节点是黑色。
性质3. 每个叶节点（NIL节点，空节点）是黑色的。
性质4. 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)
性质5. 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。
这些约束强制了红黑树的关键性质: 从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。结果是这个树大致上是平衡的。

* 红黑树：在二叉搜索树的基础上，为了让插入的二叉搜索树能平衡，以防止插入的节点顺序不好使得二叉搜索树的不平衡。
* 那么红黑树就是在每次插入节点时做一次检测，是否符合红黑树标准，如果符合就插入节点，如果不符合就变色或旋转树直到符合。
* 红黑树标准：
* 1.每一个节点不是黑色就是红色。
* 2.根总是黑色的。
* 3.如果节点是红色的，则它的子节点必是黑色的。
*/